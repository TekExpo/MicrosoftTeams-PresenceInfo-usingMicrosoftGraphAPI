{"version":3,"sources":["helpers/GraphSdkHelper.js","component/PeoplePicker.js","component/DetailsList.js","component/Search.js","component/Presence.js","App.js","helpers/config.js","index.js"],"names":["GraphSdkHelper","props","Object","classCallCheck","this","client","Client","init","debugLogging","authProvider","done","window","hello","getAuthResponse","access_token","_handleError","bind","callback","_this","api","select","get","err","res","_this2","version","filter","top","value","personas","_this3","async","each","p","concat","id","header","responseType","rawResponse","imageUrl","URL","createObjectURL","xhr","response","initialsColor","searchText","_this4","recipients","_this5","email","Subject","Body","ContentType","Content","ToRecipients","post","message","saveToSentItems","req","_data","nextLink","_this6","srchTxt","_this7","srcQuery","requests","entityTypes","query","query_string","from","size","enableTopresults","presenceStatus","_this8","presencegroup","ids","console","log","code","statusCode","login","PeoplePickerExample","possibleConstructorReturn","getPrototypeOf","call","_peopleList","_searchResults","sdkHelper","_showError","assertThisInitialized","state","selectedPeople","isLoadingPeople","isLoadingPics","users","useMailProp","map","mail","emailAddresses","address","persona","Persona","primaryText","displayName","secondaryText","userPrincipalName","presence","PersonaPresence","none","imageInitials","givenName","surname","substring","Math","floor","random","setState","getProfilePics","r","EmailAddress","Address","sendMail","toRecipients","result","type","MessageBarType","success","text","length","filterText","items","item","toLowerCase","indexOf","_listContainsPersona","Promise","resolve","reject","getPeople","people","_mapUsersToPersonas","_getPics","then","searchForPeople","react_default","a","createElement","Label","Pickers","onResolveSuggestions","_onFilterChanged","pickerSuggestionsProps","suggestionsHeaderText","noResultsFoundText","searchForMoreText","loadingText","isLoading","getTextFromItem","onChange","_onSelectionChanged","onGetMoreResults","_onGetMoreResults","className","key","Button","buttonType","onClick","_sendMailToSelectedPeople","disabled","MessageBar","messageBarType","toString","alert","error","Component","DetailsListExample","_items","_selection","Selection","selectionDetails","_getSelectionDetails","nextPageToken","getFiles","_processItems","f","Name","name","Type","file","Created","Date","createdDateTime","toLocaleDateString","LastModified","lastModifiedDateTime","toLocaleString","WebUrl","webUrl","push","index","column","Link","data-selection-invoke","selectionCount","getSelectedCount","getSelection","setItems","i","pageLink","TextField","label","onChanged","MarqueeSelection","selection","DetailsList","setKey","onItemInvoked","open","onRenderItemColumn","_onRenderItemColumn","onRenderMissingItem","_onLoadNextPage","Spinner","Search","handleChange","handleSubmit","event","target","_onSearchTextChanged","preventDefault","hitsContainers","hits","_source","sender","emailAddress","Email","inferenceClassification","subject","sentDateTime","webLink","Summary","bodyPreview","getSearch","PresenceExample","_lstitems","getPresence","recp","listItems","Id","Status","activity","Availability","availability","_getPresenceOfSelectedPeople","App","aad","oauth","auth","form","isAuthenticated","example","getMe","me","redirect_uri","scope","display","logout","CommandBar","ariaLabel","farItems","PeoplePicker_PeoplePickerExample","DetailsList_DetailsListExample","Search_Search","Presence_PresenceExample","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.e1ba5df6.chunk.js","sourcesContent":["import { Client } from \"msgraph-sdk-javascript\";\nimport async from \"async\";\n\nexport default class GraphSdkHelper {\n  constructor(props) {\n    // Initialize the Graph SDK.\n    this.client = Client.init({\n      debugLogging: true,\n      authProvider: done => {\n        done(null, window.hello(\"aad\").getAuthResponse().access_token);\n      }\n    });\n\n    this._handleError = this._handleError.bind(this);\n    this.props = props;\n  }\n\n  // GET me\n  getMe(callback) {\n    this.client\n      .api(\"/me\")\n      .select(\"displayName\")\n      .get((err, res) => {\n        if (!err) {\n          callback(null, res);\n        } else this._handleError(err);\n      });\n  }\n\n  // GET me/people\n  getPeople(callback) {\n    this.client\n      .api(\"/me/people\")\n      .version(\"beta\")\n      .filter(`personType eq 'Person'`)\n      .select(\"displayName,givenName,surname,emailAddresses,userPrincipalName\")\n      .top(20)\n      .get((err, res) => {\n        if (err) {\n          this._handleError(err);\n        }\n        callback(err, res ? res.value : []);\n      });\n  }\n\n  // GET user/id/photo/$value for each person\n  getProfilePics(personas, callback) {\n    const pic = (p, done) => {\n      this.client\n        .api(`users/${p.props.id}/photo/$value`)\n        .header(\"Cache-Control\", \"no-cache\")\n        .responseType(\"blob\")\n        .get((err, res, rawResponse) => {\n          if (err) {\n            done(err);\n          } else {\n            p.imageUrl = window.URL.createObjectURL(rawResponse.xhr.response);\n            p.initialsColor = null;\n            done();\n          }\n        });\n    };\n    async.each(personas, pic, err => {\n      callback(err);\n    });\n  }\n\n  // GET users?$filter=displayName startswith('{searchText}')\n  searchForPeople(searchText, callback) {\n    this.client\n      .api(\"/users\")\n      .filter(`startswith(displayName,'${searchText}')`)\n      .select(\"displayName,givenName,surname,mail,userPrincipalName,id\")\n      .top(20)\n      .get((err, res) => {\n        if (err) {\n          this._handleError(err);\n        }\n        callback(err, res ? res.value : []);\n      });\n  }\n\n  // POST me/sendMail\n  sendMail(recipients, callback) {\n    const email = {\n      Subject: \"Email from the Microsoft Graph Sample with Office UI Fabric\",\n      Body: {\n        ContentType: \"HTML\",\n        Content: `<p>Thanks for trying out Office UI Fabric!</p>\n          <p>See what else you can do with <a href=\"http://dev.office.com/fabric#/components\">\n          Fabric React components</a>.</p>`\n      },\n      ToRecipients: recipients\n    };\n    this.client\n      .api(\"/me/sendMail\")\n      .post(\n        { message: email, saveToSentItems: true },\n        (err, res, rawResponse) => {\n          if (err) {\n            this._handleError(err);\n          }\n          callback(err, rawResponse.req._data.message.ToRecipients);\n        }\n      );\n  }\n\n  // GET drive/root/children\n  getFiles(nextLink, callback) {\n    let request;\n    if (nextLink) {\n      request = this.client.api(nextLink);\n    } else {\n      request = this.client\n        .api(\"/me/drive/root/children\")\n        .select(\n          \"name,createdBy,createdDateTime,lastModifiedBy,lastModifiedDateTime,webUrl,file\"\n        )\n        .top(10); // default result set is 200\n    }\n    request.get((err, res) => {\n      if (err) {\n        this._handleError(err);\n      }\n      callback(err, res);\n    });\n  }\n\n  // GET drive/root/children\n  getSearch(srchTxt, callback) {\n    let request;\n    const srcQuery = {\n      requests: [\n        {\n          entityTypes: [\"microsoft.graph.message\"],\n          query: {\n            query_string: {\n              query: srchTxt\n            }\n          },\n          from: 0,\n          size: 5,\n          enableTopresults: true\n        }\n      ]\n    };\n\n    request = this.client\n      .api(\"/search/query\")\n      .version(\"beta\")\n      .post(srcQuery, (err, rawResponse) => {\n        if (err) {\n          this._handleError(err);\n        }\n        callback(err, rawResponse);\n      }); // default result set is 200\n  }\n\n  // GET drive/root/children\n  getPresence(presenceStatus, callback) {\n    let request;\n    const presencegroup = {\n      ids: presenceStatus\n    };\n    request = this.client\n      .api(\"/communications/getPresencesByUserId\")\n      .version(\"beta\")\n      .post(presencegroup, (err, rawResponse) => {\n        if (err) {\n          this._handleError(err);\n        }\n        callback(err, rawResponse);\n      }); // default result set is 200\n  }\n\n  _handleError(err) {\n    console.log(err.code + \" - \" + err.message);\n\n    // This sample just redirects to the login function when the token is expired.\n    // Production apps should implement more robust token management.\n    if (err.statusCode === 401 && err.message === \"Access token has expired.\") {\n      this.props.login();\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport { NormalPeoplePicker } from \"office-ui-fabric-react/lib/Pickers\";\nimport { Persona, PersonaPresence } from \"office-ui-fabric-react/lib/Persona\";\nimport { Button } from \"office-ui-fabric-react/lib/Button\";\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\nimport {\n  MessageBar,\n  MessageBarType\n} from \"office-ui-fabric-react/lib/MessageBar\";\n\nexport default class PeoplePickerExample extends Component {\n  constructor() {\n    super();\n\n    // Set the initial state for the picker data source.\n    // The people list is populated in the _onFilterChanged function.\n    this._peopleList = null;\n    this._searchResults = [];\n\n    // Helper that uses the JavaScript SDK to communicate with Microsoft Graph.\n    this.sdkHelper = window.sdkHelper;\n\n    this._showError = this._showError.bind(this);\n    this.state = {\n      selectedPeople: [],\n      isLoadingPeople: true,\n      isLoadingPics: true\n    };\n  }\n\n  // Map user properties to persona properties.\n  _mapUsersToPersonas(users, useMailProp) {\n    return users.map(p => {\n      // The email property is returned differently from the /users and /people endpoints.\n      let email = useMailProp ? p.mail : p.emailAddresses[0].address;\n      let persona = new Persona();\n\n      persona.primaryText = p.displayName;\n      persona.secondaryText = email || p.userPrincipalName;\n      persona.presence = PersonaPresence.none; // Presence isn't supported in Microsoft Graph yet\n      persona.imageInitials =\n        !!p.givenName && !!p.surname\n          ? p.givenName.substring(0, 1) + p.surname.substring(0, 1)\n          : p.displayName.substring(0, 1);\n      persona.initialsColor = Math.floor(Math.random() * 15) + 0;\n      persona.props = { id: p.id };\n\n      return persona;\n    });\n  }\n\n  // Gets the profile photo for each user.\n  _getPics(personas) {\n    // Make suggestions available before retrieving profile pics.\n    this.setState({\n      isLoadingPeople: false\n    });\n\n    this.sdkHelper.getProfilePics(personas, err => {\n      this.setState({\n        isLoadingPics: false\n      });\n    });\n  }\n\n  // Build and send the email to the selected people.\n  _sendMailToSelectedPeople() {\n    const recipients = this.state.selectedPeople.map(r => {\n      return {\n        EmailAddress: {\n          Address: r.secondaryText\n        }\n      };\n    });\n    this.sdkHelper.sendMail(recipients, (err, toRecipients) => {\n      if (!err) {\n        this.setState({\n          result: {\n            type: MessageBarType.success,\n            text: `Mail sent to ${toRecipients.length} recipient(s).`\n          }\n        });\n      } else this._showError(err);\n    });\n  }\n\n  // Handler for when text is entered into the picker control.\n  // Populate the people list.\n  _onFilterChanged(filterText, items) {\n    if (this._peopleList) {\n      return filterText\n        ? this._peopleList\n            .concat(this._searchResults)\n            .filter(\n              item =>\n                item.primaryText\n                  .toLowerCase()\n                  .indexOf(filterText.toLowerCase()) === 0\n            )\n            .filter(item => !this._listContainsPersona(item, items))\n        : [];\n    } else {\n      return new Promise((resolve, reject) =>\n        this.sdkHelper.getPeople((err, people) => {\n          if (!err) {\n            this._peopleList = this._mapUsersToPersonas(people, false);\n            this._getPics(this._peopleList);\n            resolve(this._peopleList);\n          } else {\n            // this._showError(err);\n          }\n        })\n      ).then(value =>\n        value\n          .concat(this._searchResults)\n          .filter(\n            item =>\n              item.primaryText\n                .toLowerCase()\n                .indexOf(filterText.toLowerCase()) === 0\n          )\n          .filter(item => !this._listContainsPersona(item, items))\n      );\n    }\n  }\n\n  // Remove currently selected people from the suggestions list.\n  _listContainsPersona(persona, items) {\n    if (!items || !items.length || items.length === 0) {\n      return false;\n    }\n    return (\n      items.filter(item => item.primaryText === persona.primaryText).length > 0\n    );\n  }\n\n  // Handler for when the Search button is clicked.\n  // This sample returns the first 20 matches as suggestions.\n  _onGetMoreResults(searchText) {\n    this.setState({\n      isLoadingPeople: true,\n      isLoadingPics: true\n    });\n    return new Promise(resolve => {\n      this.sdkHelper.searchForPeople(\n        searchText.toLowerCase(),\n        (err, people) => {\n          if (!err) {\n            this._searchResults = this._mapUsersToPersonas(people, true);\n            this.setState({\n              isLoadingPeople: false\n            });\n            this._getPics(this._searchResults);\n            resolve(this._searchResults);\n          }\n        }\n      );\n    });\n  }\n\n  // Handler for when the selection changes in the picker control.\n  // This sample updates the list of selected people and clears any messages.\n  _onSelectionChanged(items) {\n    this.setState({\n      result: null,\n      selectedPeople: items\n    });\n  }\n\n  // Renders the people picker using the NormalPeoplePicker template.\n  render() {\n    return (\n      <div>\n        <h3>People Picker example</h3>\n\n        <Label>\n          <b>Search</b>.\n        </Label>\n\n        <NormalPeoplePicker\n          onResolveSuggestions={this._onFilterChanged.bind(this)}\n          pickerSuggestionsProps={{\n            suggestionsHeaderText: \"Suggested People\",\n            noResultsFoundText: \"No results found\",\n            searchForMoreText: \"Search\",\n            loadingText: \"Loading...\",\n            isLoading: this.state.isLoadingPics\n          }}\n          getTextFromItem={persona => persona.primaryText}\n          onChange={this._onSelectionChanged.bind(this)}\n          onGetMoreResults={this._onGetMoreResults.bind(this)}\n          className=\"ms-PeoplePicker\"\n          key=\"normal-people-picker\"\n        />\n        <br />\n\n        <Button\n          buttonType={0}\n          onClick={this._sendMailToSelectedPeople.bind(this)}\n          disabled={!this.state.selectedPeople.length > 0}\n        >\n          Send mail\n        </Button>\n        <br />\n        <br />\n\n        {this.state.result && (\n          <MessageBar messageBarType={this.state.result.type}>\n            {this.state.result.text}\n          </MessageBar>\n        )}\n      </div>\n    );\n  }\n\n  // Show the results of the `/me/people` query.\n  // For sample purposes only.\n  _showPeopleResults() {\n    let message = \"Query loading. Please try again.\";\n    if (!this.state.isLoadingPeople) {\n      const people = this._peopleList.map(p => {\n        return `\\n${p.primaryText}`;\n      });\n      message = people.toString();\n    }\n    alert(message);\n  }\n\n  // Configure the error message.\n  _showError(err) {\n    this.setState({\n      result: {\n        type: MessageBarType.error,\n        text: `Error ${err.statusCode}: ${err.code} - ${err.message}`\n      }\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport { DetailsList, Selection } from \"office-ui-fabric-react/lib/DetailsList\";\nimport { Link } from \"office-ui-fabric-react/lib/Link\";\nimport { TextField } from \"office-ui-fabric-react/lib/TextField\";\nimport { MarqueeSelection } from \"office-ui-fabric-react/lib/MarqueeSelection\";\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\nimport { Spinner } from \"office-ui-fabric-react/lib/Spinner\";\nimport {\n  MessageBar,\n  MessageBarType\n} from \"office-ui-fabric-react/lib/MessageBar\";\n\nexport default class DetailsListExample extends Component {\n  constructor() {\n    super();\n\n    // The items array for the DetailsList, and the selection for the MarqueeSelection.\n    this._items = [];\n    this._selection = new Selection();\n    this._selection._onSelectionChanged = () =>\n      this.setState({\n        selectionDetails: this._getSelectionDetails()\n      });\n\n    // Helper that uses the JavaScript SDK to communicate with Microsoft Graph.\n    this.sdkHelper = window.sdkHelper;\n    this.state = {\n      items: this._items,\n      selectionDetails: this._getSelectionDetails(),\n      isLoading: false,\n      nextPageToken: null\n    };\n    this._showError = this._showError.bind(this);\n  }\n\n  // Get the files for the details list data source.\n  componentWillMount() {\n    this.sdkHelper.getFiles(null, (err, res) => {\n      this._processItems(err, res);\n    });\n  }\n\n  // Map file metadata to list items.\n  _processItems(err, res) {\n    if (!err) {\n      const files = res.value;\n      let nextLink = null;\n\n      const items = files.map(f => {\n        return {\n          Name: f.name,\n          Type: f.file ? \"File\" : \"Folder\",\n          // CreatedBy: f.createdBy.user.displayName,\n          Created: new Date(f.createdDateTime).toLocaleDateString(),\n          //  LastModifiedBy: f.lastModifiedBy.user.displayName,\n          LastModified: new Date(f.lastModifiedDateTime).toLocaleString(),\n          WebUrl: f.webUrl\n        };\n      });\n\n      // If the result set is paged, add a null item to trigger DetailsList.onRenderMissingItem.\n      if (!!res[\"@odata.nextLink\"]) {\n        nextLink = res[\"@odata.nextLink\"];\n        items.push(null);\n      }\n      this._items = this._items\n        .filter(f => {\n          return f !== null;\n        })\n        .concat(items);\n      this.setState({\n        items: this._items,\n        isLoading: !!nextLink,\n        nextPageToken: nextLink\n      });\n    } else this._showError(err);\n  }\n\n  // Build the details list.\n  _onRenderItemColumn(item, index, column) {\n    if (column.key === \"WebUrl\") {\n      return <Link data-selection-invoke={true}>{item[column.key]}</Link>;\n    }\n    return item[column.key];\n  }\n\n  // Get data to display for the items selected in the details list.\n  _getSelectionDetails() {\n    let selectionCount = this._selection.getSelectedCount();\n    switch (selectionCount) {\n      case 0:\n        return \"No items selected\";\n      case 1:\n        return \"1 item selected: \" + this._selection.getSelection()[0].Name;\n      default:\n        return `${selectionCount} items selected`;\n    }\n  }\n\n  // Handler for when text is entered into the details list.\n  // This sample filters for case-insensitive, exact match, and simply clears th current selection.\n  _onFilterChanged(filterText) {\n    this._selection.setItems([], true);\n    this.setState({\n      items: filterText\n        ? this._items.filter(\n            i => i.Name.toLowerCase().indexOf(filterText.toLowerCase()) > -1\n          )\n        : this._items\n    });\n  }\n\n  // Get paged results.\n  _onLoadNextPage() {\n    const pageLink = this.state.nextPageToken;\n    this.sdkHelper.getFiles(pageLink, (err, res) => {\n      this._processItems(err, res);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Details List example</h3>\n        <Label>Current selection:</Label>\n        <p>\n          <i>{this.state.selectionDetails}</i>\n        </p>\n        <br />\n\n        <TextField\n          label=\"Filter by name:\"\n          onChanged={this._onFilterChanged.bind(this)}\n        />\n\n        <MarqueeSelection selection={this._selection}>\n          <DetailsList\n            items={this.state.items}\n            setKey=\"set\"\n            selection={this._selection}\n            onItemInvoked={item => window.open(item.WebUrl)}\n            onRenderItemColumn={this._onRenderItemColumn.bind(this)}\n            onRenderMissingItem={() => this._onLoadNextPage()}\n          />\n          {this.state.isLoading && (\n            <div>\n              <br />\n              <Spinner className=\"loadingSpinner\" label=\"Loading...\" />\n              <br />\n            </div>\n          )}\n        </MarqueeSelection>\n        <br />\n\n        {this.state.error && (\n          <MessageBar messageBarType={this.state.error.type}>\n            {this.state.error.text}\n          </MessageBar>\n        )}\n      </div>\n    );\n  }\n\n  // Configure the error message.\n  _showError(err) {\n    this.setState({\n      error: {\n        type: MessageBarType.error,\n        text: `Error ${err.statusCode}: ${err.code} - ${err.message}`\n      }\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport { DetailsList, Selection } from \"office-ui-fabric-react/lib/DetailsList\";\r\nimport { Link } from \"office-ui-fabric-react/lib/Link\";\r\nimport { TextField } from \"office-ui-fabric-react/lib/TextField\";\r\nimport { MarqueeSelection } from \"office-ui-fabric-react/lib/MarqueeSelection\";\r\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\r\nimport { Spinner } from \"office-ui-fabric-react/lib/Spinner\";\r\nimport {\r\n  MessageBar,\r\n  MessageBarType\r\n} from \"office-ui-fabric-react/lib/MessageBar\";\r\n\r\nexport default class Search extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // The items array for the DetailsList, and the selection for the MarqueeSelection.\r\n    this._items = [];\r\n    this._selection = new Selection();\r\n    this._selection._onSelectionChanged = () =>\r\n      this.setState({\r\n        selectionDetails: this._getSelectionDetails()\r\n      });\r\n\r\n    // Helper that uses the JavaScript SDK to communicate with Microsoft Graph.\r\n    this.sdkHelper = window.sdkHelper;\r\n    this.state = {\r\n      items: this._items,\r\n      selectionDetails: this._getSelectionDetails(),\r\n      isLoading: false,\r\n      nextPageToken: null\r\n    };\r\n    this._showError = this._showError.bind(this);\r\n    this.state = { value: \"\" };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    //this._items = null;\r\n    // this._items = \"\";\r\n    this._onSearchTextChanged(this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  // Get the files for the details list data source.\r\n  componentWillMount() {\r\n    /*this.sdkHelper.getSearch(\"test\", (err, res) => {\r\n      this._processItems(err, res);\r\n    });*/\r\n  }\r\n\r\n  // Map file metadata to list items.\r\n  _processItems(err, res) {\r\n    if (!err) {\r\n      const srchResult = res.value;\r\n      let nextLink = null;\r\n      const items = srchResult[0].hitsContainers[0].hits.map((f, index) => {\r\n        return {\r\n          //  Name: new Date(f._source.receivedDateTime).toLocaleDateString(),\r\n          Name: f._source.sender.emailAddress.name,\r\n          Email: f._source.sender.emailAddress.address,\r\n          inferenceClassification: f._source.inferenceClassification,\r\n          Subject: f._source.subject,\r\n          sentDateTime: new Date(f._source.sentDateTime).toLocaleDateString(),\r\n          WebUrl: f._source.webLink,\r\n          Summary: f._source.bodyPreview\r\n        };\r\n      });\r\n\r\n      // If the result set is paged, add a null item to trigger DetailsList.onRenderMissingItem.\r\n      if (!!res[\"@odata.nextLink\"]) {\r\n        nextLink = res[\"@odata.nextLink\"];\r\n        items.push(null);\r\n      }\r\n      this._items = this._items\r\n        .filter(f => {\r\n          return f !== null;\r\n        })\r\n        .concat(items);\r\n      this.setState({\r\n        items: this._items,\r\n        isLoading: !!nextLink,\r\n        nextPageToken: nextLink\r\n      });\r\n    } else this._showError(err);\r\n  }\r\n\r\n  // Build the details list.\r\n  _onRenderItemColumn(item, index, column) {\r\n    if (column.key === \"WebUrl\") {\r\n      return <Link data-selection-invoke={true}>{item[column.key]}</Link>;\r\n    }\r\n    return item[column.key];\r\n  }\r\n\r\n  // Get data to display for the items selected in the details list.\r\n  _getSelectionDetails() {\r\n    let selectionCount = this._selection.getSelectedCount();\r\n    switch (selectionCount) {\r\n      case 0:\r\n        return \"No items selected\";\r\n      case 1:\r\n        return \"1 item selected: \" + this._selection.getSelection()[0].Name;\r\n      default:\r\n        return `${selectionCount} items selected`;\r\n    }\r\n  }\r\n\r\n  // Handler for when text is entered into the details list.\r\n  // This sample filters for case-insensitive, exact match, and simply clears th current selection.\r\n  _onSearchTextChanged(filterText) {\r\n    this.sdkHelper.getSearch(filterText, (err, res) => {\r\n      this._processItems(err, res);\r\n    });\r\n  }\r\n  _onFilterChanged(filterText) {\r\n    this._selection.setItems([], true);\r\n    this.setState({\r\n      items: filterText\r\n        ? this._items.filter(\r\n            i => i.Name.toLowerCase().indexOf(filterText.toLowerCase()) > -1\r\n          )\r\n        : this._items\r\n    });\r\n  }\r\n  // Get paged results.\r\n  _onLoadNextPage() {\r\n    const pageLink = this.state.nextPageToken;\r\n    this.sdkHelper.getSearch(pageLink, (err, res) => {\r\n      this._processItems(err, res);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Microsoft Search endpoint</h3>\r\n        <Label>Current selection:</Label>\r\n        <p>\r\n          <i>{this.state.selectionDetails}</i>\r\n        </p>\r\n\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <input type=\"button\" value=\"Search\" onClick={this.handleSubmit} />\r\n\r\n        <TextField\r\n          label=\"Filter by name:\"\r\n          onChanged={this._onFilterChanged.bind(this)}\r\n        />\r\n\r\n        <MarqueeSelection selection={this._selection}>\r\n          <DetailsList\r\n            items={this.state.items}\r\n            setKey=\"set\"\r\n            selection={this._selection}\r\n            onItemInvoked={item => window.open(item.WebUrl)}\r\n            onRenderItemColumn={this._onRenderItemColumn.bind(this)}\r\n            onRenderMissingItem={() => this._onLoadNextPage()}\r\n          />\r\n          {this.state.isLoading && (\r\n            <div>\r\n              <br />\r\n              <Spinner className=\"loadingSpinner\" label=\"Loading...\" />\r\n              <br />\r\n            </div>\r\n          )}\r\n        </MarqueeSelection>\r\n        <br />\r\n\r\n        {this.state.error && (\r\n          <MessageBar messageBarType={this.state.error.type}>\r\n            {this.state.error.text}\r\n          </MessageBar>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Configure the error message.\r\n  _showError(err) {\r\n    this.setState({\r\n      error: {\r\n        type: MessageBarType.error,\r\n        text: `Error ${err.statusCode}: ${err.code} - ${err.message}`\r\n      }\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { NormalPeoplePicker } from \"office-ui-fabric-react/lib/Pickers\";\r\nimport { Persona, PersonaPresence } from \"office-ui-fabric-react/lib/Persona\";\r\nimport { Button } from \"office-ui-fabric-react/lib/Button\";\r\nimport { Label } from \"office-ui-fabric-react/lib/Label\";\r\nimport { Spinner } from \"office-ui-fabric-react/lib/Spinner\";\r\nimport { MarqueeSelection } from \"office-ui-fabric-react/lib/MarqueeSelection\";\r\nimport { DetailsList } from \"office-ui-fabric-react/lib/DetailsList\";\r\nimport {\r\n  MessageBar,\r\n  MessageBarType\r\n} from \"office-ui-fabric-react/lib/MessageBar\";\r\n\r\nexport default class PresenceExample extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // Set the initial state for the picker data source.\r\n    // The people list is populated in the _onFilterChanged function.\r\n    this._peopleList = null;\r\n    this._searchResults = [];\r\n    this._lstitems = [];\r\n\r\n    // Helper that uses the JavaScript SDK to communicate with Microsoft Graph.\r\n    this.sdkHelper = window.sdkHelper;\r\n\r\n    this._showError = this._showError.bind(this);\r\n    this.state = {\r\n      selectedPeople: [],\r\n      isLoadingPeople: true,\r\n      isLoadingPics: true\r\n    };\r\n  }\r\n\r\n  // Map user properties to persona properties.\r\n  _mapUsersToPersonas(users, useMailProp) {\r\n    return users.map(p => {\r\n      // The email property is returned differently from the /users and /people endpoints.\r\n      let email = useMailProp ? p.mail : p.emailAddresses[0].address;\r\n      let persona = new Persona();\r\n\r\n      persona.primaryText = p.displayName;\r\n      persona.secondaryText = email || p.userPrincipalName;\r\n      persona.presence = PersonaPresence.none; // Presence isn't supported in Microsoft Graph yet\r\n      persona.imageInitials =\r\n        !!p.givenName && !!p.surname\r\n          ? p.givenName.substring(0, 1) + p.surname.substring(0, 1)\r\n          : p.displayName.substring(0, 1);\r\n      persona.initialsColor = Math.floor(Math.random() * 15) + 0;\r\n      persona.props = { id: p.id };\r\n\r\n      return persona;\r\n    });\r\n  }\r\n\r\n  // Gets the profile photo for each user.\r\n  _getPics(personas) {\r\n    // Make suggestions available before retrieving profile pics.\r\n    this.setState({\r\n      isLoadingPeople: false\r\n    });\r\n\r\n    this.sdkHelper.getProfilePics(personas, err => {\r\n      this.setState({\r\n        isLoadingPics: false\r\n      });\r\n    });\r\n  }\r\n\r\n  // Build and send the email to the selected people.\r\n  _getPresenceOfSelectedPeople() {\r\n    const recipients = this.state.selectedPeople.map(r => r.props.id);\r\n    this.sdkHelper.getPresence(recipients, (err, toRecipients) => {\r\n      this._processItems(err, toRecipients, recipients);\r\n    });\r\n  }\r\n\r\n  // Map properties metadata to list items.\r\n  _processItems(err, res, recp) {\r\n    if (!err) {\r\n      const response = res.value;\r\n      let nextLink = null;\r\n      const listItems = response.map(f => {\r\n        return {\r\n          Id: f.id,\r\n          Status: f.activity,\r\n          Availability: f.availability\r\n        };\r\n      });\r\n      this._lstitems = this._lstitems.concat(listItems);\r\n      this.setState({\r\n        listItems: this._lstitems,\r\n        isLoading: !!nextLink,\r\n        nextPageToken: nextLink\r\n      });\r\n    } else this._showError(err);\r\n  }\r\n\r\n  // Handler for when text is entered into the picker control.\r\n  // Populate the people list.\r\n  _onFilterChanged(filterText, items) {\r\n    if (this._peopleList) {\r\n      return filterText\r\n        ? this._peopleList\r\n            .concat(this._searchResults)\r\n            .filter(\r\n              item =>\r\n                item.primaryText\r\n                  .toLowerCase()\r\n                  .indexOf(filterText.toLowerCase()) === 0\r\n            )\r\n            .filter(item => !this._listContainsPersona(item, items))\r\n        : [];\r\n    } else {\r\n      return new Promise((resolve, reject) =>\r\n        this.sdkHelper.getPeople((err, people) => {\r\n          if (!err) {\r\n            this._peopleList = this._mapUsersToPersonas(people, false);\r\n            this._getPics(this._peopleList);\r\n            resolve(this._peopleList);\r\n          } else {\r\n            // this._showError(err);\r\n          }\r\n        })\r\n      ).then(value =>\r\n        value\r\n          .concat(this._searchResults)\r\n          .filter(\r\n            item =>\r\n              item.primaryText\r\n                .toLowerCase()\r\n                .indexOf(filterText.toLowerCase()) === 0\r\n          )\r\n          .filter(item => !this._listContainsPersona(item, items))\r\n      );\r\n    }\r\n  }\r\n\r\n  // Remove currently selected people from the suggestions list.\r\n  _listContainsPersona(persona, items) {\r\n    if (!items || !items.length || items.length === 0) {\r\n      return false;\r\n    }\r\n    return (\r\n      items.filter(item => item.primaryText === persona.primaryText).length > 0\r\n    );\r\n  }\r\n\r\n  // Handler for when the Search button is clicked.\r\n  // This sample returns the first 20 matches as suggestions.\r\n  _onGetMoreResults(searchText) {\r\n    this.setState({\r\n      isLoadingPeople: true,\r\n      isLoadingPics: true\r\n    });\r\n    return new Promise(resolve => {\r\n      this.sdkHelper.searchForPeople(\r\n        searchText.toLowerCase(),\r\n        (err, people) => {\r\n          if (!err) {\r\n            this._searchResults = this._mapUsersToPersonas(people, true);\r\n            this.setState({\r\n              isLoadingPeople: false\r\n            });\r\n            this._getPics(this._searchResults);\r\n            resolve(this._searchResults);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  // Handler for when the selection changes in the picker control.\r\n  // This sample updates the list of selected people and clears any messages.\r\n  _onSelectionChanged(items) {\r\n    this.setState({\r\n      result: null,\r\n      selectedPeople: items\r\n    });\r\n  }\r\n\r\n  // Renders the people picker using the NormalPeoplePicker template.\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>User Presence example</h3>\r\n\r\n        <Label>\r\n          <b>Search</b>.\r\n        </Label>\r\n\r\n        <NormalPeoplePicker\r\n          onResolveSuggestions={this._onFilterChanged.bind(this)}\r\n          pickerSuggestionsProps={{\r\n            suggestionsHeaderText: \"Suggested People\",\r\n            noResultsFoundText: \"No results found\",\r\n            searchForMoreText: \"Search\",\r\n            loadingText: \"Loading...\",\r\n            isLoading: this.state.isLoadingPics\r\n          }}\r\n          getTextFromItem={persona => persona.primaryText}\r\n          onChange={this._onSelectionChanged.bind(this)}\r\n          onGetMoreResults={this._onGetMoreResults.bind(this)}\r\n          className=\"ms-PeoplePicker\"\r\n          key=\"normal-people-picker\"\r\n        />\r\n        <br />\r\n\r\n        <Button\r\n          buttonType={0}\r\n          onClick={this._getPresenceOfSelectedPeople.bind(this)}\r\n          disabled={!this.state.selectedPeople.length > 0}\r\n        >\r\n          Get Presence\r\n        </Button>\r\n        <br />\r\n        {this.state.result && (\r\n          <MessageBar messageBarType={this.state.result.type}>\r\n            {this.state.result.text}\r\n          </MessageBar>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show the results of the `/me/people` query.\r\n  // For sample purposes only.\r\n  _showPeopleResults() {\r\n    let message = \"Query loading. Please try again.\";\r\n    if (!this.state.isLoadingPeople) {\r\n      const people = this._peopleList.map(p => {\r\n        return `\\n${p.primaryText}`;\r\n      });\r\n      message = people.toString();\r\n    }\r\n    alert(message);\r\n  }\r\n\r\n  // Configure the error message.\r\n  _showError(err) {\r\n    this.setState({\r\n      result: {\r\n        type: MessageBarType.error,\r\n        text: `Error ${err.statusCode}: ${err.code} - ${err.message}`\r\n      }\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport hello from \"hellojs\";\nimport GraphSdkHelper from \"./helpers/GraphSdkHelper\";\nimport { CommandBar } from \"office-ui-fabric-react/lib/CommandBar\";\nimport PeoplePickerExample from \"./component/PeoplePicker\";\nimport DetailsListExample from \"./component/DetailsList\";\nimport SearchExample from \"./component/Search\";\nimport PresenceExample from \"./component/Presence\";\nimport { applicationId, redirectUri } from \"./helpers/config\";\n\nwindow.hello = hello;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize the auth network.\n    hello.init({\n      aad: {\n        name: \"Azure Active Directory\",\n        oauth: {\n          version: 2,\n          auth: \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\"\n        },\n        form: false\n      }\n    });\n\n    // Initialize the Graph SDK helper and save it in the window object.\n    this.sdkHelper = new GraphSdkHelper({ login: this.login.bind(this) });\n    window.sdkHelper = this.sdkHelper;\n\n    // Set the isAuthenticated prop and the (empty) Fabric example selection.\n    this.state = {\n      isAuthenticated: !!hello(\"aad\").getAuthResponse(),\n      example: \"\"\n    };\n  }\n\n  // Get the user's display name.\n  componentWillMount() {\n    if (this.state.isAuthenticated) {\n      this.sdkHelper.getMe((err, me) => {\n        if (!err) {\n          this.setState({\n            displayName: `Hello ${me.displayName}!`\n          });\n        }\n      });\n    }\n  }\n\n  // Sign the user into Azure AD. HelloJS stores token info in localStorage.hello.\n  login() {\n    // Initialize the auth request.\n    hello.init(\n      {\n        aad: applicationId\n      },\n      {\n        redirect_uri: redirectUri,\n        scope: \"user.readbasic.all+mail.send+files.read\"\n      }\n    );\n\n    hello.login(\"aad\", {\n      display: \"page\",\n      state: \"abcd\"\n    });\n  }\n\n  // Sign the user out of the session.\n  logout() {\n    hello(\"aad\").logout();\n    this.setState({\n      isAuthenticated: false,\n      example: \"\",\n      displayName: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {\n            // Show the command bar with the Sign in or Sign out button.\n            <CommandBar\n              items={[\n                {\n                  key: \"component-example-menu\",\n                  name: \"Choose component\",\n                  disabled: !this.state.isAuthenticated,\n                  ariaLabel: \"Choose a component example to render in the page\",\n                  items: [\n                    /*  {\n                      key: \"people-picker-example\",\n                      name: \"People Picker\",\n                      onClick: () => {\n                        this.setState({ example: \"people-picker-example\" });\n                      }\n                    },\n                    {\n                      key: \"details-list-example\",\n                      name: \"Details List\",\n                      onClick: () => {\n                        this.setState({ example: \"details-list-example\" });\n                      }\n                    },\n                    {\n                      key: \"search-example\",\n                      name: \"Search\",\n                      onClick: () => {\n                        this.setState({ example: \"search-example\" });\n                      }\n                    }, */\n                    {\n                      key: \"presence-example\",\n                      name: \"Presence\",\n                      onClick: () => {\n                        this.setState({ example: \"presence-example\" });\n                      }\n                    }\n                  ]\n                }\n              ]}\n              farItems={[\n                {\n                  key: \"display-name\",\n                  name: this.state.displayName\n                },\n                {\n                  key: \"log-in-out=button\",\n                  name: this.state.isAuthenticated ? \"Sign out\" : \"Sign in\",\n                  onClick: this.state.isAuthenticated\n                    ? this.logout.bind(this)\n                    : this.login.bind(this)\n                }\n              ]}\n            />\n          }\n        </div>\n        <div className=\"ms-font-m\">\n          <div>\n            <h2>Demo - Using Microsoft Graph</h2>\n            {(!this.state.isAuthenticated || this.state.example === \"\") && (\n              <div>\n                <p>Use Microsoft Graph data in React components.</p>\n              </div>\n            )}\n          </div>\n          <br />\n          {// Show the selected fabric component example.\n          this.state.isAuthenticated && (\n            <div>\n              {this.state.example === \"people-picker-example\" && (\n                <PeoplePickerExample />\n              )}\n              {this.state.example === \"details-list-example\" && (\n                <DetailsListExample />\n              )}\n              {this.state.example === \"search-example\" && <SearchExample />}\n              {this.state.example === \"presence-example\" && <PresenceExample />}\n            </div>\n          )}\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n","/*\n *  Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license.\n *  See LICENSE in the source repository root for complete license information.\n */\n\nexport const applicationId = \"bed32ab0-835b-469b-bc9f-8e7d628b0160\";\nexport const redirectUri = \"http://localhost:3000/\";\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}